/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package clienteService.model.impl;

import aQute.bnd.annotation.ProviderType;

import clienteService.model.Clientes;
import clienteService.model.ClientesModel;
import clienteService.model.ClientesSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Clientes service. Represents a row in the &quot;VASS_Clientes&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ClientesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClientesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClientesImpl
 * @see Clientes
 * @see ClientesModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ClientesModelImpl extends BaseModelImpl<Clientes>
	implements ClientesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a clientes model instance should use the {@link Clientes} interface instead.
	 */
	public static final String TABLE_NAME = "VASS_Clientes";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "clienteId", Types.BIGINT },
			{ "nombre", Types.VARCHAR },
			{ "apellidos", Types.VARCHAR },
			{ "nif", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "descripcion", Types.VARCHAR },
			{ "imagen", Types.VARCHAR },
			{ "imagenId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clienteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("apellidos", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nif", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descripcion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imagen", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imagenId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table VASS_Clientes (uuid_ VARCHAR(75) null,clienteId LONG not null primary key,nombre VARCHAR(75) null,apellidos VARCHAR(75) null,nif VARCHAR(75) null,email VARCHAR(75) null,descripcion VARCHAR(500) null,imagen VARCHAR(500) null,imagenId LONG)";
	public static final String TABLE_SQL_DROP = "drop table VASS_Clientes";
	public static final String ORDER_BY_JPQL = " ORDER BY clientes.clienteId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY VASS_Clientes.clienteId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(clienteService.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.clienteService.model.Clientes"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(clienteService.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.clienteService.model.Clientes"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(clienteService.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.clienteService.model.Clientes"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long CLIENTEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Clientes toModel(ClientesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Clientes model = new ClientesImpl();

		model.setUuid(soapModel.getUuid());
		model.setClienteId(soapModel.getClienteId());
		model.setNombre(soapModel.getNombre());
		model.setApellidos(soapModel.getApellidos());
		model.setNif(soapModel.getNif());
		model.setEmail(soapModel.getEmail());
		model.setDescripcion(soapModel.getDescripcion());
		model.setImagen(soapModel.getImagen());
		model.setImagenId(soapModel.getImagenId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Clientes> toModels(ClientesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Clientes> models = new ArrayList<Clientes>(soapModels.length);

		for (ClientesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(clienteService.service.util.ServiceProps.get(
				"lock.expiration.time.clienteService.model.Clientes"));

	public ClientesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _clienteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClienteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _clienteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Clientes.class;
	}

	@Override
	public String getModelClassName() {
		return Clientes.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("clienteId", getClienteId());
		attributes.put("nombre", getNombre());
		attributes.put("apellidos", getApellidos());
		attributes.put("nif", getNif());
		attributes.put("email", getEmail());
		attributes.put("descripcion", getDescripcion());
		attributes.put("imagen", getImagen());
		attributes.put("imagenId", getImagenId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long clienteId = (Long)attributes.get("clienteId");

		if (clienteId != null) {
			setClienteId(clienteId);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}

		String apellidos = (String)attributes.get("apellidos");

		if (apellidos != null) {
			setApellidos(apellidos);
		}

		String nif = (String)attributes.get("nif");

		if (nif != null) {
			setNif(nif);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String descripcion = (String)attributes.get("descripcion");

		if (descripcion != null) {
			setDescripcion(descripcion);
		}

		String imagen = (String)attributes.get("imagen");

		if (imagen != null) {
			setImagen(imagen);
		}

		Long imagenId = (Long)attributes.get("imagenId");

		if (imagenId != null) {
			setImagenId(imagenId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getClienteId() {
		return _clienteId;
	}

	@Override
	public void setClienteId(long clienteId) {
		_clienteId = clienteId;
	}

	@JSON
	@Override
	public String getNombre() {
		if (_nombre == null) {
			return "";
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	@JSON
	@Override
	public String getApellidos() {
		if (_apellidos == null) {
			return "";
		}
		else {
			return _apellidos;
		}
	}

	@Override
	public void setApellidos(String apellidos) {
		_apellidos = apellidos;
	}

	@JSON
	@Override
	public String getNif() {
		if (_nif == null) {
			return "";
		}
		else {
			return _nif;
		}
	}

	@Override
	public void setNif(String nif) {
		_nif = nif;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getDescripcion() {
		if (_descripcion == null) {
			return "";
		}
		else {
			return _descripcion;
		}
	}

	@Override
	public void setDescripcion(String descripcion) {
		_descripcion = descripcion;
	}

	@JSON
	@Override
	public String getImagen() {
		if (_imagen == null) {
			return "";
		}
		else {
			return _imagen;
		}
	}

	@Override
	public void setImagen(String imagen) {
		_imagen = imagen;
	}

	@JSON
	@Override
	public long getImagenId() {
		return _imagenId;
	}

	@Override
	public void setImagenId(long imagenId) {
		_imagenId = imagenId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Clientes.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Clientes toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Clientes)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClientesImpl clientesImpl = new ClientesImpl();

		clientesImpl.setUuid(getUuid());
		clientesImpl.setClienteId(getClienteId());
		clientesImpl.setNombre(getNombre());
		clientesImpl.setApellidos(getApellidos());
		clientesImpl.setNif(getNif());
		clientesImpl.setEmail(getEmail());
		clientesImpl.setDescripcion(getDescripcion());
		clientesImpl.setImagen(getImagen());
		clientesImpl.setImagenId(getImagenId());

		clientesImpl.resetOriginalValues();

		return clientesImpl;
	}

	@Override
	public int compareTo(Clientes clientes) {
		long primaryKey = clientes.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Clientes)) {
			return false;
		}

		Clientes clientes = (Clientes)obj;

		long primaryKey = clientes.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ClientesModelImpl clientesModelImpl = this;

		clientesModelImpl._originalUuid = clientesModelImpl._uuid;

		clientesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Clientes> toCacheModel() {
		ClientesCacheModel clientesCacheModel = new ClientesCacheModel();

		clientesCacheModel.uuid = getUuid();

		String uuid = clientesCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			clientesCacheModel.uuid = null;
		}

		clientesCacheModel.clienteId = getClienteId();

		clientesCacheModel.nombre = getNombre();

		String nombre = clientesCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			clientesCacheModel.nombre = null;
		}

		clientesCacheModel.apellidos = getApellidos();

		String apellidos = clientesCacheModel.apellidos;

		if ((apellidos != null) && (apellidos.length() == 0)) {
			clientesCacheModel.apellidos = null;
		}

		clientesCacheModel.nif = getNif();

		String nif = clientesCacheModel.nif;

		if ((nif != null) && (nif.length() == 0)) {
			clientesCacheModel.nif = null;
		}

		clientesCacheModel.email = getEmail();

		String email = clientesCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			clientesCacheModel.email = null;
		}

		clientesCacheModel.descripcion = getDescripcion();

		String descripcion = clientesCacheModel.descripcion;

		if ((descripcion != null) && (descripcion.length() == 0)) {
			clientesCacheModel.descripcion = null;
		}

		clientesCacheModel.imagen = getImagen();

		String imagen = clientesCacheModel.imagen;

		if ((imagen != null) && (imagen.length() == 0)) {
			clientesCacheModel.imagen = null;
		}

		clientesCacheModel.imagenId = getImagenId();

		return clientesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", clienteId=");
		sb.append(getClienteId());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append(", apellidos=");
		sb.append(getApellidos());
		sb.append(", nif=");
		sb.append(getNif());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", descripcion=");
		sb.append(getDescripcion());
		sb.append(", imagen=");
		sb.append(getImagen());
		sb.append(", imagenId=");
		sb.append(getImagenId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("clienteService.model.Clientes");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clienteId</column-name><column-value><![CDATA[");
		sb.append(getClienteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>apellidos</column-name><column-value><![CDATA[");
		sb.append(getApellidos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nif</column-name><column-value><![CDATA[");
		sb.append(getNif());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descripcion</column-name><column-value><![CDATA[");
		sb.append(getDescripcion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imagen</column-name><column-value><![CDATA[");
		sb.append(getImagen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imagenId</column-name><column-value><![CDATA[");
		sb.append(getImagenId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Clientes.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Clientes.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _clienteId;
	private String _nombre;
	private String _apellidos;
	private String _nif;
	private String _email;
	private String _descripcion;
	private String _imagen;
	private long _imagenId;
	private long _columnBitmask;
	private Clientes _escapedModel;
}